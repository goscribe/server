
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@scribe/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum ArtifactType {
  STUDY_GUIDE
  FLASHCARD_SET
  WORKSHEET
  MEETING_SUMMARY
  PODCAST_EPISODE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

//
// NextAuth-compatible auth models (minimal)
//
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?   // for credentials login
  image         String?

  // Ownership
  folders       Folder[]          @relation("UserFolders")
  workspaces    Workspace[]       @relation("UserWorkspaces")
  uploads       FileAsset[]       @relation("UserUploads")
  artifacts     Artifact[]        @relation("UserArtifacts")
  versions      ArtifactVersion[] @relation("UserArtifactVersions")

  accounts      Account[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// Filesystem-like structure
//
model Folder {
  id        String    @id @default(cuid())
  name      String
  ownerId   String
  owner     User      @relation("UserFolders", fields: [ownerId], references: [id], onDelete: Cascade)

  // Nested folders
  parentId  String?
  parent    Folder?   @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[]  @relation("FolderChildren")

  // Files (workspaces) inside folders
  workspaces Workspace[]

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Helpful composite index: folders per owner + parent
  @@index([ownerId, parentId])
}

model Workspace {
  id          String   @id @default(cuid())
  title       String
  description String?  // optional notes/description for the "file"
  ownerId     String
  owner       User     @relation("UserWorkspaces", fields: [ownerId], references: [id], onDelete: Cascade)

  // A workspace (file) lives in a folder (nullable = root)
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)

  // Raw uploads attached to this workspace
  uploads     FileAsset[]

  // AI outputs for this workspace (study guides, flashcards, etc.)
  artifacts   Artifact[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId, folderId])
}

//
// User uploads (source materials for AI)
//
model FileAsset {
  id        String   @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation("UserUploads", fields: [userId], references: [id], onDelete: Cascade)

  name      String
  mimeType  String
  size      Int
  bucket    String?
  objectKey String?
  url       String?  // optional if serving via signed GET per-view
  checksum  String?  // optional server-side integrity

  meta      Json?    // arbitrary metadata

  createdAt DateTime @default(now())

  @@index([workspaceId])
  @@index([userId, createdAt])
}

//
// AI Outputs (Artifacts) with Versioning
// - One Artifact per output stream (e.g., one Study Guide, with many versions)
// - Some artifact types (flashcards, worksheet) have child rows
//
model Artifact {
  id          String       @id @default(cuid())
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  type        ArtifactType
  title       String
  isArchived  Boolean      @default(false)

  createdById String?
  createdBy   User?        @relation("UserArtifacts", fields: [createdById], references: [id], onDelete: SetNull)

  versions    ArtifactVersion[] // text/transcript versions etc.
  flashcards  Flashcard[]       // only meaningful for FLASHCARD_SET
  questions   WorksheetQuestion[] // only meaningful for WORKSHEET

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([workspaceId, type])
}

model ArtifactVersion {
  id          String   @id @default(cuid())
  artifactId  String
  artifact    Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  // Plain text content (e.g., Study Guide body, Meeting Summary text, Podcast transcript)
  content     String    // rich text serialized as markdown/HTML stored as TEXT

  // For Podcast episodes or other media, store URLs / durations / etc. in data
  data        Json?     // e.g., { "audioUrl": "...", "durationSec": 312, "voice": "..." }

  // Version sequencing (auto-increment per artifact)
  version     Int

  createdById String?
  createdBy   User?    @relation("UserArtifactVersions", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())

  @@unique([artifactId, version]) // each artifact has 1,2,3...
  @@index([artifactId])
}

//
// Flashcards (child items of a FLASHCARD_SET Artifact)
//
model Flashcard {
  id         String   @id @default(cuid())
  artifactId String
  artifact   Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  front      String   // question/term
  back       String   // answer/definition
  tags       String[] // optional keywords
  order      Int      @default(0)

  createdAt  DateTime @default(now())

  @@index([artifactId])
}

//
// Worksheet Questions (child items of a WORKSHEET Artifact)
//
model WorksheetQuestion {
  id         String    @id @default(cuid())
  artifactId String
  artifact   Artifact  @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  prompt     String
  answer     String?
  difficulty Difficulty @default(MEDIUM)
  order      Int        @default(0)

  meta       Json?      // e.g., { "type": "MCQ", "choices": ["A","B","C","D"], "correct": 1 }

  createdAt  DateTime   @default(now())

  @@index([artifactId])
}