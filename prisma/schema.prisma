
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // for shadow db in migrations
}

//
// Enums
//
enum ArtifactType {
  STUDY_GUIDE
  FLASHCARD_SET
  WORKSHEET
  MEETING_SUMMARY
  PODCAST_EPISODE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT
  NUMERIC
  TRUE_FALSE
  MATCHING
  FILL_IN_THE_BLANK
}

//
// NextAuth-compatible auth models (minimal)
//
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?   // for credentials login
  image         String?
  session       Session[]

  // Ownership
  folders       Folder[]          @relation("UserFolders")
  workspaces    Workspace[]       @relation("UserWorkspaces")
  invitedInWorkspaces Workspace[]       @relation("WorkspaceSharedWith") // many-to-many
  uploads       FileAsset[]       @relation("UserUploads")
  artifacts     Artifact[]        @relation("UserArtifacts")
  versions      ArtifactVersion[] @relation("UserArtifactVersions")
  worksheetQuestionProgress WorksheetQuestionProgress[]

  chats         Chat[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Session {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// Filesystem-like structure
//
model Folder {
  id        String    @id @default(cuid())
  name      String
  ownerId   String
  owner     User      @relation("UserFolders", fields: [ownerId], references: [id], onDelete: Cascade)

  // Nested folders
  parentId  String?
  parent    Folder?   @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[]  @relation("FolderChildren")

  // Files (workspaces) inside folders
  workspaces Workspace[]

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Helpful composite index: folders per owner + parent
  @@index([ownerId, parentId])
}

model Workspace {
  id          String   @id @default(cuid())
  title       String
  description String?  // optional notes/description for the "file"
  ownerId     String
  owner       User     @relation("UserWorkspaces", fields: [ownerId], references: [id], onDelete: Cascade)

  // A workspace (file) lives in a folder (nullable = root)
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  
  channels  Channel[]

  shareLink   String?  @unique // optional public share link

  sharedWith  User[]   @relation("WorkspaceSharedWith") // many-to-many for sharing

  // Raw uploads attached to this workspace
  uploads     FileAsset[]

  // AI outputs for this workspace (study guides, flashcards, etc.)
  artifacts   Artifact[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId, folderId])
}

model Channel {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  name        String

  createdAt   DateTime  @default(now())
  chats      Chat[]

  @@index([workspaceId])
}

model Chat {
  id          String    @id @default(cuid())
  channelId   String
  channel     Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  message     String    // chat message content

  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  @@index([channelId, createdAt])
}

//
// User uploads (source materials for AI)
//
model FileAsset {
  id        String   @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation("UserUploads", fields: [userId], references: [id], onDelete: Cascade)

  name      String
  mimeType  String
  size      Int
  bucket    String?
  objectKey String?
  url       String?  // optional if serving via signed GET per-view
  checksum  String?  // optional server-side integrity

  meta      Json?    // arbitrary metadata

  createdAt DateTime @default(now())

  @@index([workspaceId])
  @@index([userId, createdAt])
}

//
// AI Outputs (Artifacts) with Versioning
// - One Artifact per output stream (e.g., one Study Guide, with many versions)
// - Some artifact types (flashcards, worksheet) have child rows
//
model Artifact {
  id          String       @id @default(cuid())
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  type        ArtifactType
  title       String
  isArchived  Boolean      @default(false)

  // Worksheet-specific fields
  difficulty  Difficulty?  // only meaningful for WORKSHEET
  estimatedTime String?    // only meaningful for WORKSHEET

  description     String?

  createdById String?
  createdBy   User?        @relation("UserArtifacts", fields: [createdById], references: [id], onDelete: SetNull)

  versions    ArtifactVersion[] // text/transcript versions etc.
  flashcards  Flashcard[]       // only meaningful for FLASHCARD_SET
  questions   WorksheetQuestion[] // only meaningful for WORKSHEET

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([workspaceId, type])
}

model ArtifactVersion {
  id          String   @id @default(cuid())
  artifactId  String
  artifact    Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  // Plain text content (e.g., Study Guide body, Meeting Summary text, Podcast transcript)
  content     String    // rich text serialized as markdown/HTML stored as TEXT

  // For Podcast episodes or other media, store URLs / durations / etc. in data
  data        Json?     // e.g., { "audioUrl": "...", "durationSec": 312, "voice": "..." }

  // Version sequencing (auto-increment per artifact)
  version     Int

  createdById String?
  createdBy   User?    @relation("UserArtifactVersions", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())

  @@unique([artifactId, version]) // each artifact has 1,2,3...
  @@index([artifactId])
}

//
// Flashcards (child items of a FLASHCARD_SET Artifact)
//
model Flashcard {
  id         String   @id @default(cuid())
  artifactId String
  artifact   Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  front      String   // question/term
  back       String   // answer/definition
  tags       String[] // optional keywords
  order      Int      @default(0)

  createdAt  DateTime @default(now())

  @@index([artifactId])
}

//
// Worksheet Questions (child items of a WORKSHEET Artifact)
//
model WorksheetQuestion {
  id         String       @id @default(cuid())
  artifactId String
  artifact   Artifact     @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  prompt     String
  answer     String?
  type       QuestionType @default(TEXT)
  difficulty Difficulty   @default(MEDIUM)
  order      Int          @default(0)

  meta       Json?        // e.g., { "choices": ["A","B","C","D"], "correct": 1, "options": [...] }

  createdAt  DateTime     @default(now())

  @@index([artifactId])
  progress   WorksheetQuestionProgress[]
}

//
// Per-user progress for Worksheet Questions
//
model WorksheetQuestionProgress {
  id                   String            @id @default(cuid())
  worksheetQuestionId  String
  worksheetQuestion    WorksheetQuestion @relation(fields: [worksheetQuestionId], references: [id], onDelete: Cascade)

  userId               String
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  completed            Boolean           @default(false)
  userAnswer           String?
  completedAt          DateTime?
  attempts             Int               @default(0)
  timeSpentSec         Int?
  meta                 Json?

  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@unique([worksheetQuestionId, userId])
  @@index([userId])
}